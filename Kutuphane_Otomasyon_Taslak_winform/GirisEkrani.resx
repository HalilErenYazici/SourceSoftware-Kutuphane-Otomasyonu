<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="userImg.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOwAAADsAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABDAAAAYgAAAH0AAAB5AAAAXwAAADYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAEgEBAfsrJB/uNy8o+TYuJ/onIRzxBAMD8wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ADEAAAAFAAAAAAAAAAIAAABkDgwK7XNiUv9zYlL/c2JS/3BgUP8FBAP7AAAAQgAAAAAAAAAAAAAADgAA
        ACkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAACBAgIB+wgHBcQAAAB+BAMD5hIPDe5cTkH/c2JS/3NiUv9zYlL/c2JS/1FFOv8OCwn1BwYG3AIC
        AnYEBALTBAMD+AUDA2IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAgJzAgEB/AoI
        B7sAAABvBgYF3A4MCfJYSz//c2JS/3NiUv9zYlL/c2JS/0xBNv8JCAb4CgkH0gICAmgFBATMBAMD+AYG
        A1cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAlAAAAAwAAAAAAAAAAAAAAVw0LCu9zYlL/c2JS/3NiUv9wX1D/BAQD+wAAADQAAAAAAAAAAAAA
        AAkAAAAfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAQEB+yUgGvExKSP6MCki+iIcGPMEBAPyAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1AAAAVAAAAG4AAABrAAAATwAA
        ACoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////4H///8B///yAM//wAAH/4AAA/+AAAH/AH4A/wH/AP+D/
        8PHBwBPAwYAbwAOAEAEDwB/jA4AQAQOAEAEDwBvjA4AQAcGAH8DBwBDA4P/wccB/wD/AH4A/4AAAf/AA
        AP/4AAH//MAz///Af///4H////////////8=
</value>
  </data>
</root>